name: Java CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches: '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [Linux]
    name: Build on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - run: rm -rf /tmp/*
        continue-on-error: true
      - name: Build with Maven
        run: mvn -ntp -U verify
        shell: cmd
        if: matrix.os == 'Windows'
      - name: Build with Maven
        env:
          AWS_REGION: us-west-2
        run: mvn -ntp -U verify
        if: matrix.os != 'Windows'
      - name: Upload Failed Test Report
        uses: actions/upload-artifact@v1.0.0
        if: failure()
        with:
          name: Failed Test Report ${{ matrix.os }}
          path: target/surefire-reports
      - name: Upload Coverage
        uses: actions/upload-artifact@v1.0.0
        if: always()
        with:
          name: Coverage Report ${{ matrix.os }}
          path: target/jacoco-report
      - name: Convert Jacoco unit test report to Cobertura
        run: python3 .github/scripts/cover2cover.py target/jacoco-report/jacoco.xml src/main/java > target/jacoco-report/cobertura.xml
        if: matrix.os == 'Linux'
      - name: Convert Jacoco interation test report to Cobertura
        run: python3 .github/scripts/cover2cover.py target/jacoco-report/jacoco-it/jacoco.xml src/main/java > target/jacoco-report/cobertura-it.xml
        if: matrix.os == 'Linux'
      - name: cobertura-report-unit-test
        uses: shaguptashaikh/cobertura-action@master
        continue-on-error: true
        with:
          # The GITHUB_TOKEN for this repo
          repo_token: ${{ github.token }}
          # Path to the cobertura file.
          path: target/jacoco-report/cobertura.xml
          # If files with 100% should be skipped from report.
          skip_covered: false
          # Minimum allowed coverage percentage as an integer.
          minimum_coverage: 65
          # Show line rate as specific column.
          show_line: true
          # Show branch rate as specific column.
          show_branch: true
          # Use class names instead of the filename
          show_class_names: true
          # Use a unique name for the report and comment
          report_name: Unit Tests Coverage Report
      - name: cobertura-report-integration-test
        uses: shaguptashaikh/cobertura-action@master
        continue-on-error: true
        with:
          # The GITHUB_TOKEN for this repo
          repo_token: ${{ github.token }}
          # Path to the cobertura file.
          path: target/jacoco-report/cobertura-it.xml
          # If files with 100% should be skipped from report.
          skip_covered: false
          # Minimum allowed coverage percentage as an integer.
          minimum_coverage: 58
          # Show line rate as specific column.
          show_line: true
          # Show branch rate as specific column.
          show_branch: true
          # Use class names instead of the filename
          show_class_names: true
          # Use a unique name for the report and comment
          report_name: Integration Tests Coverage Report
      - name: Check compatibility
        run: >-
          mvn -ntp japicmp:cmp -DskipTests &&
          pip3 -q install agithub &&
          python3 .github/scripts/binaryCompatibility.py --input target/japicmp/default-cli.xml --token "${{ github.token }}"
        if: github.event_name == 'pull_request' && matrix.os == 'Linux'
      - name: Upload Compatibility Report
        uses: actions/upload-artifact@v1.0.0
        with:
          name: Binary Compatibility Report
          path: target/japicmp/default-cli.html
        if: github.event_name == 'pull_request' && matrix.os == 'Linux'
      - name: Build benchmark with Maven
        # Changes can break the benchmark, so compile it now to make sure it is buildable
        run: |
          mvn -ntp -U install -DskipTests
          mvn -ntp -U -f src/test/greengrass-nucleus-benchmark install
        if: matrix.os == 'Linux'
